<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Host</name>
    </assembly>
    <members>
        <member name="T:Host.Controllers.ProdutoApiController">
            <summary>
            ProdutoApiController
            </summary>
        </member>
        <member name="F:Host.Controllers.ProdutoApiController.service">
            <summary>
            service
            </summary>
        </member>
        <member name="M:Host.Controllers.ProdutoApiController.#ctor(AppService.IProdutoAppService)">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:Host.Controllers.ProdutoApiController.Get(System.Int32)">
            <summary>
            Obtém Por ID
            </summary>
            <param name="codigo">código</param>
            <returns>Produto</returns>
        </member>
        <member name="M:Host.Controllers.ProdutoApiController.GetAll">
            <summary>
            Obtém Todos
            </summary>
            <returns>Lista de Produtos</returns>
        </member>
        <member name="M:Host.Controllers.ProdutoApiController.Find(Model.Produto)">
            <summary>
            Busca
            </summary>
            <param name="produto">produto</param>
            <returns>Lista de Produtos</returns>
        </member>
        <member name="M:Host.Controllers.ProdutoApiController.Salvar(Model.Produto)">
            <summary>
            Salva um Produto (cria ou atualiza)
            </summary>
            <param name="produto">produto</param>
            <returns>Booleano</returns>
        </member>
        <member name="M:Host.Controllers.ProdutoApiController.Excluir(System.Int32)">
            <summary>
            Exclui um Produto
            </summary>
            <param name="codigo">código</param>
            <returns>Booleano</returns>
        </member>
        <member name="M:Host.Controllers.ProdutoApiController.Excluir(Model.Produto)">
            <summary>
            Exclui um Produto
            </summary>
            <param name="produto">produto</param>
            <returns>Booleano</returns>
        </member>
        <member name="T:Host.Controllers.TokenController">
            <summary>
            TokenController
            </summary>
        </member>
        <member name="M:Host.Controllers.TokenController.#ctor(AppService.ITokenAppService)">
            <summary>
            Construtor
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Host.Controllers.TokenController.Create(Security.ApplicationTokenData)">
            <summary>
            Cria Token
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.TokenController.Validate(System.String)">
            <summary>
            Valida Token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Host.WeatherForecastController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Host.WeatherForecastController.#ctor(Microsoft.Extensions.Logging.ILogger{Host.WeatherForecastController})">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Host.WeatherForecastController.Get">
            <summary>
            /
            </summary>
            <returns></returns>
        </member>
        <member name="T:Host.Program">
            <summary>
            Program
            </summary>
        </member>
        <member name="M:Host.Program.Main(System.String[])">
            <summary>
            Main
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Host.Program.CreateHostBuilder(System.String[])">
            <summary>
            CreateHostBuilder
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Host.Startup">
            <summary>
            Startup
            </summary>
        </member>
        <member name="P:Host.Startup.Configuration">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="M:Host.Startup.#ctor(Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            Startup
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Host.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            ConfigureServices
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Host.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Configure
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
